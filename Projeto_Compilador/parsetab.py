
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIFrightELSETHENrightASSIGNleftORleftANDrightNOTnonassocEQUALNOTEQUALLESSGREATERLESSEQUALGREATEREQUALleftADDSUBleftMULDIVIDEDIVMODPOWrightUMINUSleftATADD AND ARRAY ASSIGN AT BEGIN BOOLEAN BREAK CHAR CHAR_CONST COLON COMMA CONST CONTINUE DIV DIVIDE DO DOT DOWNTO ELSE END EQUAL EXIT FALSE FILE FOR FORWARD FUNCTION GREATER GREATEREQUAL HEX_CONST ID IF INTEGER INTEGER_CONST LBRACKET LESS LESSEQUAL LPAREN MOD MUL NOT NOTEQUAL OF OR POW PROCEDURE PROGRAM RANGE RBRACKET READLN REAL REAL_CONST RECORD RETURN RPAREN SEMICOLON SET STRING STRING_CONST SUB THEN TO TRUE TYPE VAR WHILE WRITELNprogram : PROGRAM ID SEMICOLON block DOTblock : optional_declarations compound_statementoptional_declarations : declarations\n                            | emptydeclarations : declaration_section\n                   | declarations declaration_sectiondeclaration_section : VAR var_declaration_list SEMICOLON\n                          | CONST const_declaration_list SEMICOLON\n                          | TYPE type_declaration_list SEMICOLON\n                          | FUNCTION function_declaration SEMICOLON\n                          | PROCEDURE procedure_declaration SEMICOLONvar_declaration_list : var_declaration\n                           | var_declaration_list SEMICOLON var_declarationconst_declaration_list : const_declaration\n                             | const_declaration_list SEMICOLON const_declarationtype_declaration_list : type_declaration\n                            | type_declaration_list SEMICOLON type_declarationfunction_declaration : ID parameters COLON type SEMICOLON block\n                           | ID parameters COLON type SEMICOLON FORWARD SEMICOLONprocedure_declaration : ID parameters SEMICOLON block\n                            | ID parameters SEMICOLON FORWARD SEMICOLONparameters : LPAREN parameter_list RPAREN\n                 | emptyparameter_list : parameter\n                     | parameter_list SEMICOLON parameterparameter : ID_list COLON type\n                 | VAR ID_list COLON typevar_declaration : ID_list COLON typeconst_declaration : ID EQUAL expressiontype_declaration : ID EQUAL typeID_list : ID\n               | ID_list COMMA IDtype : INTEGER\n            | REAL\n            | BOOLEAN\n            | CHAR\n            | STRING\n            | SET OF type\n            | FILE OF type\n            | ARRAY LBRACKET INTEGER_CONST RANGE INTEGER_CONST RBRACKET OF type\n            | RECORD field_list END\n            | IDfield_list : var_declaration SEMICOLON\n                 | field_list var_declaration SEMICOLONcompound_statement : BEGIN statement_list ENDstatement_list : statement\n                     | statement_list SEMICOLON statementstatement : non_if_statement\n                | if_statementnon_if_statement : assignment_statement\n                       | while_statement\n                       | for_statement\n                       | compound_statement\n                       | writeln_statement\n                       | readln_statement\n                       | function_call_statement\n                       | BREAK\n                       | CONTINUE\n                       | EXIT\n                       | RETURN expression\n                       | emptyif_statement : IF expression THEN statement %prec THEN\n                   | IF expression THEN statement ELSE statementassignment_statement : variable ASSIGN expressionwhile_statement : WHILE expression DO statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                    | FOR ID ASSIGN expression DOWNTO expression DO statementwriteln_statement : WRITELN LPAREN expression_list RPAREN\n                        | WRITELN LPAREN RPARENreadln_statement : READLN LPAREN variable_list RPAREN\n                       | READLN LPAREN RPARENfunction_call_statement : ID LPAREN argument_list RPAREN\n                              | ID LPAREN RPARENexpression_list : expression\n                      | expression_list COMMA expressionvariable_list : variable\n                    | variable_list COMMA variablevariable : ID\n               | ID LBRACKET expression RBRACKET\n               | AT ID\n               | ID LPAREN argument_list RPAREN\n               | ID LPAREN RPARENargument_list : expression\n                    | argument_list COMMA expressionexpression : simple_expression\n                 | simple_expression relational_operator simple_expressionsimple_expression : term\n                        | ADD term %prec UMINUS\n                        | SUB term %prec UMINUS\n                        | simple_expression adding_operator termterm : factor\n            | term multiplying_operator factor\n            | term POW factorfactor : variable\n             | INTEGER_CONST\n             | REAL_CONST\n             | STRING_CONST\n             | LPAREN expression RPAREN\n             | CHAR_CONST\n             | HEX_CONST\n             | TRUE\n             | FALSE\n             | NOT factorrelational_operator : EQUAL\n                          | NOTEQUAL\n                          | LESS\n                          | GREATER\n                          | LESSEQUAL\n                          | GREATEREQUALadding_operator : ADD\n                      | SUB\n                      | ORmultiplying_operator : MUL\n                           | DIVIDE\n                           | DIV\n                           | MOD\n                           | ANDempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,15,],[0,-1,]),'ID':([2,10,11,12,13,14,17,47,49,51,52,56,57,58,59,60,61,62,63,66,71,75,76,82,87,90,93,94,95,96,108,115,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,145,147,148,159,160,162,166,167,182,185,187,193,197,200,201,202,207,216,217,221,],[3,22,25,28,30,32,53,88,88,88,92,97,22,109,110,25,88,28,109,22,53,88,88,88,88,88,88,88,88,88,22,109,22,88,88,-104,-105,-106,-107,-108,-109,-110,-111,-112,88,88,-113,-114,-115,-116,-117,88,53,53,88,109,109,22,22,109,88,88,88,-43,109,53,88,88,-44,53,53,109,]),'SEMICOLON':([3,16,17,19,20,23,24,26,27,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,67,69,70,71,72,73,74,77,78,79,80,81,83,84,85,86,88,97,98,99,100,101,102,103,104,109,111,112,113,114,116,117,121,140,141,143,145,146,147,150,154,157,163,164,165,169,170,171,172,173,174,175,177,178,179,181,183,184,186,188,189,191,192,195,196,198,199,200,208,209,210,211,215,216,217,219,220,222,],[4,-2,-118,57,-12,60,-14,62,-16,64,68,-118,71,-46,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-23,120,-45,-118,-60,-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-13,-28,-33,-34,-35,-36,-37,-42,-15,-29,-17,-30,166,-24,-47,-88,-89,-103,-118,-64,-118,-73,-69,-71,193,194,-22,-20,198,-86,-90,-92,-93,-98,-82,-62,-65,-72,-79,-68,-70,-38,-39,-41,207,-25,-26,-21,-81,-118,-18,215,-27,-63,-19,-118,-118,-66,-67,-40,]),'BEGIN':([4,6,7,8,9,17,18,57,60,62,64,68,71,120,145,147,194,200,216,217,],[-118,17,-3,-4,-5,17,-6,-7,-8,-9,-10,-11,17,-118,17,17,-118,17,17,17,]),'VAR':([4,7,9,18,57,60,62,64,66,68,120,166,194,],[10,10,-5,-6,-7,-8,-9,-10,119,-11,10,119,10,]),'CONST':([4,7,9,18,57,60,62,64,68,120,194,],[11,11,-5,-6,-7,-8,-9,-10,-11,11,11,]),'TYPE':([4,7,9,18,57,60,62,64,68,120,194,],[12,12,-5,-6,-7,-8,-9,-10,-11,12,12,]),'FUNCTION':([4,7,9,18,57,60,62,64,68,120,194,],[13,13,-5,-6,-7,-8,-9,-10,-11,13,13,]),'PROCEDURE':([4,7,9,18,57,60,62,64,68,120,194,],[14,14,-5,-6,-7,-8,-9,-10,-11,14,14,]),'DOT':([5,16,70,],[15,-2,-45,]),'BREAK':([17,71,145,147,200,216,217,],[44,44,44,44,44,44,44,]),'CONTINUE':([17,71,145,147,200,216,217,],[45,45,45,45,45,45,45,]),'EXIT':([17,71,145,147,200,216,217,],[46,46,46,46,46,46,46,]),'RETURN':([17,71,145,147,200,216,217,],[47,47,47,47,47,47,47,]),'IF':([17,71,145,147,200,216,217,],[49,49,49,49,49,49,49,]),'WHILE':([17,71,145,147,200,216,217,],[51,51,51,51,51,51,51,]),'FOR':([17,71,145,147,200,216,217,],[52,52,52,52,52,52,52,]),'WRITELN':([17,71,145,147,200,216,217,],[54,54,54,54,54,54,54,]),'READLN':([17,71,145,147,200,216,217,],[55,55,55,55,55,55,55,]),'END':([17,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,70,71,72,73,74,77,78,79,80,81,83,84,85,86,88,97,121,140,141,143,145,146,147,150,154,157,162,171,172,173,174,175,177,178,179,181,183,184,186,193,199,200,207,211,216,217,219,220,],[-118,70,-46,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-45,-118,-60,-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-47,-88,-89,-103,-118,-64,-118,-73,-69,-71,191,-86,-90,-92,-93,-98,-82,-62,-65,-72,-79,-68,-70,-43,-81,-118,-44,-63,-118,-118,-66,-67,]),'AT':([17,47,49,51,61,71,75,76,82,87,90,93,94,95,96,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,145,147,148,182,185,187,200,201,202,216,217,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-104,-105,-106,-107,-108,-109,-110,-111,-112,56,56,-113,-114,-115,-116,-117,56,56,56,56,56,56,56,56,56,56,56,56,]),'COLON':([21,22,30,65,67,110,118,165,168,],[58,-31,-118,115,-23,-32,167,-22,197,]),'COMMA':([21,22,73,74,77,78,79,80,81,83,84,85,86,88,97,110,118,140,141,143,149,151,153,155,156,158,168,171,172,173,174,175,176,177,183,199,203,204,205,],[59,-31,-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-32,59,-88,-89,-103,182,-83,185,-74,187,-76,59,-86,-90,-92,-93,-98,182,-82,-79,-81,-84,-75,-77,]),'EQUAL':([25,28,73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[61,63,124,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-90,-92,-93,-98,-82,-79,-81,]),'LPAREN':([30,32,47,49,51,53,54,55,61,75,76,82,87,88,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,182,185,201,202,],[66,66,82,82,82,93,95,96,82,82,82,82,82,144,82,82,82,82,82,82,-104,-105,-106,-107,-108,-109,-110,-111,-112,82,82,-113,-114,-115,-116,-117,82,82,82,82,82,82,]),'ELSE':([35,36,37,38,39,40,41,42,43,44,45,46,48,70,72,73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,145,146,147,150,154,157,171,172,173,174,175,177,178,179,181,183,184,186,199,200,211,216,217,219,220,],[-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-45,-60,-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-118,-64,-118,-73,-69,-71,-86,-90,-92,-93,-98,-82,200,-65,-72,-79,-68,-70,-81,-118,-63,-118,-118,-66,-67,]),'ADD':([47,49,51,61,73,74,77,78,79,80,81,82,83,84,85,86,88,90,93,94,95,97,122,124,125,126,127,128,129,140,141,143,144,148,171,172,173,174,175,177,182,183,185,199,201,202,],[75,75,75,75,130,-87,-91,-94,-95,-96,-97,75,-99,-100,-101,-102,-78,75,75,75,75,-80,75,-104,-105,-106,-107,-108,-109,-88,-89,-103,75,75,130,-90,-92,-93,-98,-82,75,-79,75,-81,75,75,]),'SUB':([47,49,51,61,73,74,77,78,79,80,81,82,83,84,85,86,88,90,93,94,95,97,122,124,125,126,127,128,129,140,141,143,144,148,171,172,173,174,175,177,182,183,185,199,201,202,],[76,76,76,76,131,-87,-91,-94,-95,-96,-97,76,-99,-100,-101,-102,-78,76,76,76,76,-80,76,-104,-105,-106,-107,-108,-109,-88,-89,-103,76,76,131,-90,-92,-93,-98,-82,76,-79,76,-81,76,76,]),'INTEGER_CONST':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,161,182,185,201,202,206,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,-104,-105,-106,-107,-108,-109,-110,-111,-112,79,79,-113,-114,-115,-116,-117,79,79,190,79,79,79,79,214,]),'REAL_CONST':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,182,185,201,202,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,-104,-105,-106,-107,-108,-109,-110,-111,-112,80,80,-113,-114,-115,-116,-117,80,80,80,80,80,80,]),'STRING_CONST':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,182,185,201,202,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,-104,-105,-106,-107,-108,-109,-110,-111,-112,81,81,-113,-114,-115,-116,-117,81,81,81,81,81,81,]),'CHAR_CONST':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,182,185,201,202,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,-104,-105,-106,-107,-108,-109,-110,-111,-112,83,83,-113,-114,-115,-116,-117,83,83,83,83,83,83,]),'HEX_CONST':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,182,185,201,202,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,-104,-105,-106,-107,-108,-109,-110,-111,-112,84,84,-113,-114,-115,-116,-117,84,84,84,84,84,84,]),'TRUE':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,182,185,201,202,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,-104,-105,-106,-107,-108,-109,-110,-111,-112,85,85,-113,-114,-115,-116,-117,85,85,85,85,85,85,]),'FALSE':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,182,185,201,202,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,-104,-105,-106,-107,-108,-109,-110,-111,-112,86,86,-113,-114,-115,-116,-117,86,86,86,86,86,86,]),'NOT':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,144,148,182,185,201,202,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,-104,-105,-106,-107,-108,-109,-110,-111,-112,87,87,-113,-114,-115,-116,-117,87,87,87,87,87,87,]),'ASSIGN':([50,53,92,97,150,181,183,],[90,-78,148,-80,-82,-81,-79,]),'LBRACKET':([53,88,107,],[94,94,161,]),'INTEGER':([58,63,115,159,160,167,197,221,],[100,100,100,100,100,100,100,100,]),'REAL':([58,63,115,159,160,167,197,221,],[101,101,101,101,101,101,101,101,]),'BOOLEAN':([58,63,115,159,160,167,197,221,],[102,102,102,102,102,102,102,102,]),'CHAR':([58,63,115,159,160,167,197,221,],[103,103,103,103,103,103,103,103,]),'STRING':([58,63,115,159,160,167,197,221,],[104,104,104,104,104,104,104,104,]),'SET':([58,63,115,159,160,167,197,221,],[105,105,105,105,105,105,105,105,]),'FILE':([58,63,115,159,160,167,197,221,],[106,106,106,106,106,106,106,106,]),'ARRAY':([58,63,115,159,160,167,197,221,],[107,107,107,107,107,107,107,107,]),'RECORD':([58,63,115,159,160,167,197,221,],[108,108,108,108,108,108,108,108,]),'THEN':([73,74,77,78,79,80,81,83,84,85,86,88,89,97,140,141,143,171,172,173,174,175,177,183,199,],[-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,145,-80,-88,-89,-103,-86,-90,-92,-93,-98,-82,-79,-81,]),'DO':([73,74,77,78,79,80,81,83,84,85,86,88,91,97,140,141,143,171,172,173,174,175,177,183,199,212,213,],[-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,147,-80,-88,-89,-103,-86,-90,-92,-93,-98,-82,-79,-81,216,217,]),'RPAREN':([73,74,77,78,79,80,81,83,84,85,86,88,93,95,96,97,100,101,102,103,104,109,116,117,140,141,142,143,144,149,151,153,155,156,158,171,172,173,174,175,176,177,183,188,189,191,195,196,199,203,204,205,210,222,],[-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,150,154,157,-80,-33,-34,-35,-36,-37,-42,165,-24,-88,-89,175,-103,177,181,-83,184,-74,186,-76,-86,-90,-92,-93,-98,199,-82,-79,-38,-39,-41,-25,-26,-81,-84,-75,-77,-27,-40,]),'RBRACKET':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,152,171,172,173,174,175,177,183,199,214,],[-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,183,-86,-90,-92,-93,-98,-82,-79,-81,218,]),'TO':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,171,172,173,174,175,177,180,183,199,],[-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-86,-90,-92,-93,-98,-82,201,-79,-81,]),'DOWNTO':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,171,172,173,174,175,177,180,183,199,],[-85,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-86,-90,-92,-93,-98,-82,202,-79,-81,]),'NOTEQUAL':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[125,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-90,-92,-93,-98,-82,-79,-81,]),'LESS':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[126,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-90,-92,-93,-98,-82,-79,-81,]),'GREATER':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[127,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-90,-92,-93,-98,-82,-79,-81,]),'LESSEQUAL':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[128,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-90,-92,-93,-98,-82,-79,-81,]),'GREATEREQUAL':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[129,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,-90,-92,-93,-98,-82,-79,-81,]),'OR':([73,74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,171,172,173,174,175,177,183,199,],[132,-87,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,-88,-89,-103,132,-90,-92,-93,-98,-82,-79,-81,]),'POW':([74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[134,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,134,134,-103,134,-92,-93,-98,-82,-79,-81,]),'MUL':([74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[135,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,135,135,-103,135,-92,-93,-98,-82,-79,-81,]),'DIVIDE':([74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[136,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,136,136,-103,136,-92,-93,-98,-82,-79,-81,]),'DIV':([74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[137,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,137,137,-103,137,-92,-93,-98,-82,-79,-81,]),'MOD':([74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[138,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,138,138,-103,138,-92,-93,-98,-82,-79,-81,]),'AND':([74,77,78,79,80,81,83,84,85,86,88,97,140,141,143,172,173,174,175,177,183,199,],[139,-91,-94,-95,-96,-97,-99,-100,-101,-102,-78,-80,139,139,-103,139,-92,-93,-98,-82,-79,-81,]),'OF':([105,106,218,],[159,160,221,]),'FORWARD':([120,194,],[170,209,]),'RANGE':([190,],[206,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,120,194,],[5,169,208,]),'optional_declarations':([4,120,194,],[6,6,6,]),'declarations':([4,120,194,],[7,7,7,]),'empty':([4,17,30,32,71,120,145,147,194,200,216,217,],[8,48,67,67,48,8,48,48,8,48,48,48,]),'declaration_section':([4,7,120,194,],[9,18,9,9,]),'compound_statement':([6,17,71,145,147,200,216,217,],[16,40,40,40,40,40,40,40,]),'var_declaration_list':([10,],[19,]),'var_declaration':([10,57,108,162,],[20,98,163,192,]),'ID_list':([10,57,66,108,119,162,166,],[21,21,118,21,168,21,118,]),'const_declaration_list':([11,],[23,]),'const_declaration':([11,60,],[24,111,]),'type_declaration_list':([12,],[26,]),'type_declaration':([12,62,],[27,113,]),'function_declaration':([13,],[29,]),'procedure_declaration':([14,],[31,]),'statement_list':([17,],[33,]),'statement':([17,71,145,147,200,216,217,],[34,121,178,179,211,219,220,]),'non_if_statement':([17,71,145,147,200,216,217,],[35,35,35,35,35,35,35,]),'if_statement':([17,71,145,147,200,216,217,],[36,36,36,36,36,36,36,]),'assignment_statement':([17,71,145,147,200,216,217,],[37,37,37,37,37,37,37,]),'while_statement':([17,71,145,147,200,216,217,],[38,38,38,38,38,38,38,]),'for_statement':([17,71,145,147,200,216,217,],[39,39,39,39,39,39,39,]),'writeln_statement':([17,71,145,147,200,216,217,],[41,41,41,41,41,41,41,]),'readln_statement':([17,71,145,147,200,216,217,],[42,42,42,42,42,42,42,]),'function_call_statement':([17,71,145,147,200,216,217,],[43,43,43,43,43,43,43,]),'variable':([17,47,49,51,61,71,75,76,82,87,90,93,94,95,96,122,123,133,134,144,145,147,148,182,185,187,200,201,202,216,217,],[50,78,78,78,78,50,78,78,78,78,78,78,78,78,158,78,78,78,78,78,50,50,78,78,78,205,50,78,78,50,50,]),'parameters':([30,32,],[65,69,]),'expression':([47,49,51,61,82,90,93,94,95,144,148,182,185,201,202,],[72,89,91,112,142,146,151,152,155,151,180,203,204,212,213,]),'simple_expression':([47,49,51,61,82,90,93,94,95,122,144,148,182,185,201,202,],[73,73,73,73,73,73,73,73,73,171,73,73,73,73,73,73,]),'term':([47,49,51,61,75,76,82,90,93,94,95,122,123,144,148,182,185,201,202,],[74,74,74,74,140,141,74,74,74,74,74,74,172,74,74,74,74,74,74,]),'factor':([47,49,51,61,75,76,82,87,90,93,94,95,122,123,133,134,144,148,182,185,201,202,],[77,77,77,77,77,77,77,143,77,77,77,77,77,77,173,174,77,77,77,77,77,77,]),'type':([58,63,115,159,160,167,197,221,],[99,114,164,188,189,196,210,222,]),'parameter_list':([66,],[116,]),'parameter':([66,166,],[117,195,]),'relational_operator':([73,],[122,]),'adding_operator':([73,171,],[123,123,]),'multiplying_operator':([74,140,141,172,],[133,133,133,133,]),'argument_list':([93,144,],[149,176,]),'expression_list':([95,],[153,]),'variable_list':([96,],[156,]),'field_list':([108,],[162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block DOT','program',5,'p_program','anasin.py',21),
  ('block -> optional_declarations compound_statement','block',2,'p_block','anasin.py',26),
  ('optional_declarations -> declarations','optional_declarations',1,'p_optional_declarations','anasin.py',31),
  ('optional_declarations -> empty','optional_declarations',1,'p_optional_declarations','anasin.py',32),
  ('declarations -> declaration_section','declarations',1,'p_declarations','anasin.py',37),
  ('declarations -> declarations declaration_section','declarations',2,'p_declarations','anasin.py',38),
  ('declaration_section -> VAR var_declaration_list SEMICOLON','declaration_section',3,'p_declaration_section','anasin.py',46),
  ('declaration_section -> CONST const_declaration_list SEMICOLON','declaration_section',3,'p_declaration_section','anasin.py',47),
  ('declaration_section -> TYPE type_declaration_list SEMICOLON','declaration_section',3,'p_declaration_section','anasin.py',48),
  ('declaration_section -> FUNCTION function_declaration SEMICOLON','declaration_section',3,'p_declaration_section','anasin.py',49),
  ('declaration_section -> PROCEDURE procedure_declaration SEMICOLON','declaration_section',3,'p_declaration_section','anasin.py',50),
  ('var_declaration_list -> var_declaration','var_declaration_list',1,'p_var_declaration_list','anasin.py',55),
  ('var_declaration_list -> var_declaration_list SEMICOLON var_declaration','var_declaration_list',3,'p_var_declaration_list','anasin.py',56),
  ('const_declaration_list -> const_declaration','const_declaration_list',1,'p_const_declaration_list','anasin.py',64),
  ('const_declaration_list -> const_declaration_list SEMICOLON const_declaration','const_declaration_list',3,'p_const_declaration_list','anasin.py',65),
  ('type_declaration_list -> type_declaration','type_declaration_list',1,'p_type_declaration_list','anasin.py',73),
  ('type_declaration_list -> type_declaration_list SEMICOLON type_declaration','type_declaration_list',3,'p_type_declaration_list','anasin.py',74),
  ('function_declaration -> ID parameters COLON type SEMICOLON block','function_declaration',6,'p_function_declaration','anasin.py',82),
  ('function_declaration -> ID parameters COLON type SEMICOLON FORWARD SEMICOLON','function_declaration',7,'p_function_declaration','anasin.py',83),
  ('procedure_declaration -> ID parameters SEMICOLON block','procedure_declaration',4,'p_procedure_declaration','anasin.py',91),
  ('procedure_declaration -> ID parameters SEMICOLON FORWARD SEMICOLON','procedure_declaration',5,'p_procedure_declaration','anasin.py',92),
  ('parameters -> LPAREN parameter_list RPAREN','parameters',3,'p_parameters','anasin.py',100),
  ('parameters -> empty','parameters',1,'p_parameters','anasin.py',101),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','anasin.py',106),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','anasin.py',107),
  ('parameter -> ID_list COLON type','parameter',3,'p_parameter','anasin.py',115),
  ('parameter -> VAR ID_list COLON type','parameter',4,'p_parameter','anasin.py',116),
  ('var_declaration -> ID_list COLON type','var_declaration',3,'p_var_declaration','anasin.py',124),
  ('const_declaration -> ID EQUAL expression','const_declaration',3,'p_const_declaration','anasin.py',129),
  ('type_declaration -> ID EQUAL type','type_declaration',3,'p_type_declaration','anasin.py',134),
  ('ID_list -> ID','ID_list',1,'p_ID_list','anasin.py',139),
  ('ID_list -> ID_list COMMA ID','ID_list',3,'p_ID_list','anasin.py',140),
  ('type -> INTEGER','type',1,'p_type','anasin.py',148),
  ('type -> REAL','type',1,'p_type','anasin.py',149),
  ('type -> BOOLEAN','type',1,'p_type','anasin.py',150),
  ('type -> CHAR','type',1,'p_type','anasin.py',151),
  ('type -> STRING','type',1,'p_type','anasin.py',152),
  ('type -> SET OF type','type',3,'p_type','anasin.py',153),
  ('type -> FILE OF type','type',3,'p_type','anasin.py',154),
  ('type -> ARRAY LBRACKET INTEGER_CONST RANGE INTEGER_CONST RBRACKET OF type','type',8,'p_type','anasin.py',155),
  ('type -> RECORD field_list END','type',3,'p_type','anasin.py',156),
  ('type -> ID','type',1,'p_type','anasin.py',157),
  ('field_list -> var_declaration SEMICOLON','field_list',2,'p_field_list','anasin.py',171),
  ('field_list -> field_list var_declaration SEMICOLON','field_list',3,'p_field_list','anasin.py',172),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','anasin.py',180),
  ('statement_list -> statement','statement_list',1,'p_statement_list','anasin.py',185),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','anasin.py',186),
  ('statement -> non_if_statement','statement',1,'p_statement','anasin.py',194),
  ('statement -> if_statement','statement',1,'p_statement','anasin.py',195),
  ('non_if_statement -> assignment_statement','non_if_statement',1,'p_non_if_statement','anasin.py',200),
  ('non_if_statement -> while_statement','non_if_statement',1,'p_non_if_statement','anasin.py',201),
  ('non_if_statement -> for_statement','non_if_statement',1,'p_non_if_statement','anasin.py',202),
  ('non_if_statement -> compound_statement','non_if_statement',1,'p_non_if_statement','anasin.py',203),
  ('non_if_statement -> writeln_statement','non_if_statement',1,'p_non_if_statement','anasin.py',204),
  ('non_if_statement -> readln_statement','non_if_statement',1,'p_non_if_statement','anasin.py',205),
  ('non_if_statement -> function_call_statement','non_if_statement',1,'p_non_if_statement','anasin.py',206),
  ('non_if_statement -> BREAK','non_if_statement',1,'p_non_if_statement','anasin.py',207),
  ('non_if_statement -> CONTINUE','non_if_statement',1,'p_non_if_statement','anasin.py',208),
  ('non_if_statement -> EXIT','non_if_statement',1,'p_non_if_statement','anasin.py',209),
  ('non_if_statement -> RETURN expression','non_if_statement',2,'p_non_if_statement','anasin.py',210),
  ('non_if_statement -> empty','non_if_statement',1,'p_non_if_statement','anasin.py',211),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','anasin.py',219),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','anasin.py',220),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','anasin.py',228),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','anasin.py',233),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','anasin.py',238),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','anasin.py',239),
  ('writeln_statement -> WRITELN LPAREN expression_list RPAREN','writeln_statement',4,'p_writeln_statement','anasin.py',244),
  ('writeln_statement -> WRITELN LPAREN RPAREN','writeln_statement',3,'p_writeln_statement','anasin.py',245),
  ('readln_statement -> READLN LPAREN variable_list RPAREN','readln_statement',4,'p_readln_statement','anasin.py',253),
  ('readln_statement -> READLN LPAREN RPAREN','readln_statement',3,'p_readln_statement','anasin.py',254),
  ('function_call_statement -> ID LPAREN argument_list RPAREN','function_call_statement',4,'p_function_call_statement','anasin.py',261),
  ('function_call_statement -> ID LPAREN RPAREN','function_call_statement',3,'p_function_call_statement','anasin.py',262),
  ('expression_list -> expression','expression_list',1,'p_expression_list','anasin.py',270),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','anasin.py',271),
  ('variable_list -> variable','variable_list',1,'p_variable_list','anasin.py',279),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','anasin.py',280),
  ('variable -> ID','variable',1,'p_variable','anasin.py',288),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable','anasin.py',289),
  ('variable -> AT ID','variable',2,'p_variable','anasin.py',290),
  ('variable -> ID LPAREN argument_list RPAREN','variable',4,'p_variable','anasin.py',291),
  ('variable -> ID LPAREN RPAREN','variable',3,'p_variable','anasin.py',292),
  ('argument_list -> expression','argument_list',1,'p_argument_list','anasin.py',306),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','anasin.py',307),
  ('expression -> simple_expression','expression',1,'p_expression','anasin.py',315),
  ('expression -> simple_expression relational_operator simple_expression','expression',3,'p_expression','anasin.py',316),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','anasin.py',324),
  ('simple_expression -> ADD term','simple_expression',2,'p_simple_expression','anasin.py',325),
  ('simple_expression -> SUB term','simple_expression',2,'p_simple_expression','anasin.py',326),
  ('simple_expression -> simple_expression adding_operator term','simple_expression',3,'p_simple_expression','anasin.py',327),
  ('term -> factor','term',1,'p_term','anasin.py',337),
  ('term -> term multiplying_operator factor','term',3,'p_term','anasin.py',338),
  ('term -> term POW factor','term',3,'p_term','anasin.py',339),
  ('factor -> variable','factor',1,'p_factor','anasin.py',347),
  ('factor -> INTEGER_CONST','factor',1,'p_factor','anasin.py',348),
  ('factor -> REAL_CONST','factor',1,'p_factor','anasin.py',349),
  ('factor -> STRING_CONST','factor',1,'p_factor','anasin.py',350),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','anasin.py',351),
  ('factor -> CHAR_CONST','factor',1,'p_factor','anasin.py',352),
  ('factor -> HEX_CONST','factor',1,'p_factor','anasin.py',353),
  ('factor -> TRUE','factor',1,'p_factor','anasin.py',354),
  ('factor -> FALSE','factor',1,'p_factor','anasin.py',355),
  ('factor -> NOT factor','factor',2,'p_factor','anasin.py',356),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','anasin.py',366),
  ('relational_operator -> NOTEQUAL','relational_operator',1,'p_relational_operator','anasin.py',367),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','anasin.py',368),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','anasin.py',369),
  ('relational_operator -> LESSEQUAL','relational_operator',1,'p_relational_operator','anasin.py',370),
  ('relational_operator -> GREATEREQUAL','relational_operator',1,'p_relational_operator','anasin.py',371),
  ('adding_operator -> ADD','adding_operator',1,'p_adding_operator','anasin.py',376),
  ('adding_operator -> SUB','adding_operator',1,'p_adding_operator','anasin.py',377),
  ('adding_operator -> OR','adding_operator',1,'p_adding_operator','anasin.py',378),
  ('multiplying_operator -> MUL','multiplying_operator',1,'p_multiplying_operator','anasin.py',383),
  ('multiplying_operator -> DIVIDE','multiplying_operator',1,'p_multiplying_operator','anasin.py',384),
  ('multiplying_operator -> DIV','multiplying_operator',1,'p_multiplying_operator','anasin.py',385),
  ('multiplying_operator -> MOD','multiplying_operator',1,'p_multiplying_operator','anasin.py',386),
  ('multiplying_operator -> AND','multiplying_operator',1,'p_multiplying_operator','anasin.py',387),
  ('empty -> <empty>','empty',0,'p_empty','anasin.py',392),
]
